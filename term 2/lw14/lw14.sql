alter session set nls_date_format='dd-mm-yyyy hh24:mi:ss';

alter system set job_queue_processes = 5;
select count(*) from dba_objects_ae where object_type = 'package';

-- TASK №1
DROP TABLE LAB_14_START;
DROP TABLE LAB_14_FINISH;
DROP TABLE JOB_STATUS;


CREATE TABLE LAB_14_START (
    A NUMBER,
    B NUMBER
);
CREATE TABLE LAB_14_FINISH (
    A NUMBER,
    B NUMBER
);

CREATE TABLE JOB_STATUS (
    STATUS        NVARCHAR2(50),
    ERROR_MESSAGE NVARCHAR2(500),
    DATETIME      DATE DEFAULT SYSDATE
);

INSERT INTO LAB_14_START VALUES (1, 1001);
INSERT INTO LAB_14_START VALUES (2, 1002);
INSERT INTO LAB_14_START VALUES (3, 1003);
INSERT INTO LAB_14_START VALUES (4, 1004);
INSERT INTO LAB_14_START VALUES (5, 1005);
INSERT INTO LAB_14_START VALUES (6, 1006);
INSERT INTO LAB_14_START VALUES (7, 1007);
INSERT INTO LAB_14_START VALUES (8, 1008);
INSERT INTO LAB_14_START VALUES (9, 1009);
COMMIT;
SELECT * FROM LAB_14_START;

SELECT * FROM LAB_14_FINISH;

-- TASK №2, 3
DROP PROCEDURE JOB_PROCEDURE;

CREATE OR REPLACE PACKAGE LAB14 AS
  PROCEDURE JOB_PROCEDURE;
END LAB14;
/

CREATE OR REPLACE PACKAGE BODY LAB14
IS PROCEDURE JOB_PROCEDURE
IS
    CURSOR JOB_CURSOR IS SELECT * FROM LAB_14_START;
    ERR_MESSAGE VARCHAR2(500);
BEGIN
    FOR M IN JOB_CURSOR
    LOOP
        INSERT INTO LAB_14_FINISH VALUES (M.A, M.B);
    END LOOP;

    DELETE FROM LAB_14_START;
    INSERT INTO JOB_STATUS (STATUS, DATETIME) VALUES ('SUCCESS', SYSDATE);
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
          ERR_MESSAGE := SQLERRM;
          INSERT INTO JOB_STATUS (STATUS, ERROR_MESSAGE) VALUES ('FAILURE', ERR_MESSAGE);
          COMMIT;
END JOB_PROCEDURE;
END LAB14;


DECLARE JOB_NUMBER USER_JOBS.JOB%TYPE;
BEGIN
  DBMS_JOB.SUBMIT(
    job        => job_number,
    what       => 'BEGIN LAB14.JOB_PROCEDURE(); END;',
    next_date  => TRUNC(SYSDATE) + 10/24,
    interval   => 'SYSDATE + 5/(24*60)'
  );
  COMMIT;
  DBMS_OUTPUT.PUT_LINE(JOB_NUMBER);
END;

SELECT * FROM JOB_STATUS;

-- TASK №4
SELECT JOB, WHAT, LAST_DATE, LAST_SEC, NEXT_DATE, NEXT_SEC, BROKEN FROM USER_JOBS;

-- TASK №5
BEGIN
  DBMS_JOB.RUN(26);
END;

BEGIN
  DBMS_JOB.REMOVE(26);
END;


SELECT * FROM JOB_STATUS;

-- TASK №6


CREATE OR REPLACE PACKAGE LAB14_TASK_6 AS
  PROCEDURE JOB_PROCEDURE;
END LAB14_TASK_6;
/

CREATE OR REPLACE PACKAGE BODY LAB14_TASK_6
IS PROCEDURE JOB_PROCEDURE
IS
    CURSOR JOB_CURSOR IS SELECT * FROM LAB_14_START;
    ERR_MESSAGE VARCHAR2(500);
BEGIN
    FOR M IN JOB_CURSOR
    LOOP
        INSERT INTO LAB_14_FINISH VALUES (M.A, M.B);
    END LOOP;

    DELETE FROM LAB_14_START;
    INSERT INTO JOB_STATUS (STATUS, DATETIME) VALUES ('SUCCESS', SYSDATE);
    COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
          ERR_MESSAGE := SQLERRM;
          INSERT INTO JOB_STATUS (STATUS, ERROR_MESSAGE) VALUES ('FAILURE', ERR_MESSAGE);
          COMMIT;
END JOB_PROCEDURE;

BEGIN
DBMS_SCHEDULER.CREATE_SCHEDULE(
    SCHEDULE_NAME => 'SCH_1',
    START_DATE => to_timestamp_tz('2023-12-16 10:03:00', 'YYYY-MM-DD HH24:MI:SS TZR'),
    REPEAT_INTERVAL => 'FREQ=MINUTELY; INTERVAL=5',
    COMMENTS => 'SCH_1 STARTS NOW EVERY 5 MINUTES'
);
DBMS_SCHEDULER.CREATE_PROGRAM(
    PROGRAM_NAME => 'PROGRAM_1',
    PROGRAM_TYPE => 'STORED_PROCEDURE',
    PROGRAM_ACTION => 'JOB_PROCEDURE',
    NUMBER_OF_ARGUMENTS => 0,
    ENABLED => TRUE,
    COMMENTS => 'PROGRAM_1'
);
DBMS_SCHEDULER.CREATE_JOB(
    JOB_NAME => 'JOB_1',
    PROGRAM_NAME => 'PROGRAM_1',
    SCHEDULE_NAME => 'SCH_1',
    ENABLED => TRUE
);
END LAB14_TASK_6;
/


SELECT * FROM USER_SCHEDULER_SCHEDULES;


SELECT * FROM USER_SCHEDULER_PROGRAMS;


SELECT * FROM USER_SCHEDULER_JOBS;

BEGIN
  DBMS_SCHEDULER.DISABLE('DBMS_JOB$_1');
END;

BEGIN
    LAB14_TASK_6.JOB_PROCEDURE();
end;

BEGIN
    DBMS_SCHEDULER.RUN_JOB('DBMS_JOB$_1');
END;

BEGIN
  DBMS_SCHEDULER.DROP_JOB( JOB_NAME => 'DBMS_JOB$_35');
END;